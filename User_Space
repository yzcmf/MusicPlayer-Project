				
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>

#define MSG_SIZE 40			// message size

int main(int argc, char *argv[])

{

	int length1,length2,sock,boolval=1;

	struct sockaddr_in client_addr;//For client

	struct sockaddr_in server_addr;//For server

	struct sockaddr_in boardcast_addr;//For boardcast

	struct hostent *host;//For the IP

	char IP[MSG_SIZE],IP_NAME[MSG_SIZE];	// to store received messages or messages to be sent.

	int fifo;

	fifo= open("/dev/rtf/0", O_RDWR);	//fifo to send tone message to kernel

	int fd;

	fd=open("/dev/mem",O_RDWR|O_SYNC,0);

	unsigned long *VIC2_ptr=(unsigned long*)mmap(NULL,getpagesize(),PROT_READ|PROT_WRITE,MAP_SHARED,fd,0x800C0000);

	unsigned long *VIC2SoftInt;

	VIC2SoftInt=VIC2_ptr+6;//interrupt register


	//create the sockets

	sock = socket(AF_INET, SOCK_DGRAM, 0); // Creates socket. Connectionless.


	length1 = sizeof(server_addr);			// length of structure
	length2 = sizeof(boardcast_addr);			// length of structure


	bzero(&server_addr,length1);			// sets all values to zero. memset() could be used

	server_addr.sin_family = AF_INET;		// symbol constant for Internet domain

	server_addr.sin_addr.s_addr = INADDR_ANY;		// IP address of the machine on which

	// the server is running
	server_addr.sin_port = htons(atoi(argv[1]));	// port number



	bzero(&boardcast_addr,length2);

	boardcast_addr.sin_family = AF_INET;		// symbol constant for Internet domain

	boardcast_addr.sin_addr.s_addr = inet_addr("10.3.52.255");		// broadcast address

	boardcast_addr.sin_port =htons(atoi(argv[1]));//port number




	// binds the socket to the address of the host and the port number
	if (bind(sock, (struct sockaddr *)&server_addr, length1) < 0)
		error("binding");



	// change socket permissions to allow broadcast
	if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &boolval, sizeof(boolval)) < 0)
	{
		printf("error setting socket options\n");
		exit(-1);
	}



	//get the IP

	gethostname(IP_NAME,MSG_SIZE);

	host=gethostbyname(IP_NAME);

	struct in_addr ** myIpList;

	myIpList=(struct in_addr**)host->h_addr_list;

	strcpy(IP,inet_ntoa(*myIpList[0]));

	printf("The IP of the machine is :%s\n",IP);
	//printf("The IP of the machine is :%s\n",IP_NAME);

	//Get the last 2 bits of the IP to gain the port number

	char my_port_number_string[40];

	int my_port_number,i;

	for(i=strlen(IP)-1;i>0;i--)
	{
		if(IP[i]=='.')

		{
			printf("The i is %d\n",i);

			strcpy(my_port_number_string,IP+i+1);

			break;

		}
	}

	printf("My port_string is %s\n",my_port_number_string);

	my_port_number=atoi(my_port_number_string);

	printf("My portnumber is:%d\n",my_port_number);

	//while loop

	socklen_t fromlen;//received the socket used

	fromlen = sizeof(struct sockaddr_in);	// size of structure

	int information;//For the send and receive function

	char buffer[MSG_SIZE];

	int master=0;

	int my_vote_number;

	srand(time(NULL));

	while(1)

	{

		bzero(buffer,MSG_SIZE);		// sets all values to zero. memset() could be used

		information = recvfrom(sock, buffer, MSG_SIZE, 0, (struct sockaddr *)&client_addr, &fromlen);//receive from the client

		printf("\nThe received data is :%s\n",buffer);

		//Now if we type the "WHOIS","VOTE","#","@" in the client program,then the severs will receive the information


		if(strncmp("WHOIS",buffer,5)==0)
		{

			if(master)//as long as the master become 1,then the serve board number will be passed to the client,saying that he is the master

			{

				//printf("master state is:%d\n",master);

				sprintf(buffer,"Yuxuan on board %d is the master",my_port_number);//pass the print information to the buffer

				information=sendto(sock,buffer,MSG_SIZE,0,(struct sockaddr *)&client_addr, fromlen);//send to the client telling him I am the master

			}
		}

		else if (strncmp("VOTE",buffer,4)==0)

		{

			master=1;

			my_vote_number=rand()%10+1;

			sprintf(buffer,"# %s %d",IP,my_vote_number);

			//printf("NOW1 the buffer is:%s\n",buffer);

			information = sendto(sock, buffer, MSG_SIZE, 0, (struct sockaddr *)&boardcast_addr, sizeof(boardcast_addr));//boardcast to the whole internet,not only the cilent but also all the severs

			//printf("NOW2 the buffer is:%s\n",buffer);

			//if now we type the "WHOIS",then each of the boards will post the "I am the master" information,then we need to compared the buffer,and set the master_value again
		}


		else if (strncmp("#",buffer,1)==0&&master)// "&&master" is the condition that the cilent has asked the "VOTE" information,exclude we randomly type the "#"

		{

			//All we need to do here is get all the severs vote_numbers;
			//We already have the sever itself vote_number and we need other severs' vote_number

			//printf("NOW3 the buffer is:%s\n",buffer);

			char otherboard_vote_number_string[40];

			int otherboard_vote_number;

			for(i=strlen(buffer)-1;i>0;i--)

			{
				if(buffer[i]=='.')

				{

					strcpy(otherboard_vote_number_string,buffer+i+4);

					otherboard_vote_number=atoi(otherboard_vote_number_string);

					break;

				}

			}

			//printf("NOW3 the  otherboard_vote_number is:%d\n", otherboard_vote_number);

			//now do the compare

			if(my_vote_number > otherboard_vote_number)
				master=1;//I will become the master

			else if(my_vote_number < otherboard_vote_number)
				master=0;//I will not become the master


			else if(my_vote_number == otherboard_vote_number)// get the last two IP address(port number) and do the same process as the above
			{
				//the my_port_number is now the vote again number
				//all we need is to know other_port_numbers and make the compares again

				//printf("my_vote_number is:%d\n", my_vote_number);
				//printf("otherboard_vote_number is:%d\n", otherboard_vote_number);

				int other_port_number;

				//printf("NOW1 the other_port_number is:%d\n", other_port_number);

				char other_port_number_string[40];

				for(i=strlen(buffer)-1;i>0;i--)

				{
					if(buffer[i]=='.')

					{

						strncpy(other_port_number_string,buffer+i+1,2);

						other_port_number=atoi(other_port_number_string);

						break;

					}

				}

				//printf("NOW2 the other_port_number is:%d\n", other_port_number);

				if(other_port_number>my_port_number)

					master=0;

				else if(other_port_number<my_port_number)

					master=1;

			}

		}


		//else if (strncmp("@",buffer,1)==0)

		//{}

		else if (strncmp("@",buffer,1)==0)
		{

			int number_send;

			int check=1;

			if(master == 0&& check == 1)

			{

				information=sendto(sock, buffer, MSG_SIZE, 0,(struct sockaddr *)&boardcast_addr, sizeof(boardcast_addr));

				check=0;

			}

			else if (strncmp("A",buffer,2)==0)

				number_send=0;

			else if (strncmp("B",buffer,2)==0)

				number_send=1;

			else if (strncmp("C",buffer,2)==0)

				number_send=2;

			else if (strncmp("D",buffer,2)==0)

				number_send=3;

			else if (strncmp("E",buffer,2)==0)

				number_send=4;

			write(fifo,&number_send,sizeof(number_send));

			*VIC2SoftInt=*VIC2SoftInt|0x80000000;//1000 0000 0000 0000 0000 0000 0000 0000,generate the interrupts

		}

	}

	return 0;
}



