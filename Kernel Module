
#ifndef MODULE
#define MODULE
#endif

#ifndef __KERNEL__
#define __KERNEL__
#endif

#include <linux/module.h>
#include <linux/kernel.h>
#include <asm/io.h>
#include <rtai.h>
#include <rtai_sched.h>
#include <rtai_hal.h>
#include <rtai_fifos.h>

MODULE_LICENSE("GPL");

static RT_TASK musicalKeyboard;
RTIME period;
RTIME music_period[5];

int hard_irq_num = 59;									//use hardware interrupt Line 59
int soft_irq_num = 63;									//use software interrupt Line 63

//registers pointers
unsigned long *PBDR;
unsigned long *PBDDR;
unsigned long *PFDR;
unsigned long *PFDDR;

unsigned long *GPIOBIntEn;
unsigned long *GPIOBIntType1;
unsigned long *GPIOBIntType2;
unsigned long *GPIOBIntEOI;

//unsigned long *GPIOBDB;
unsigned long *IntStsB;
unsigned long *VIC2IntEnable;
unsigned long* VIC2SoftIntClear;

static void hardware_process(unsigned irq_num, void *cookie)

{

	rt_disable_irq (irq_num);
	//printk ("Hardware Handler is called.\n");

	int button;

	if (*IntStsB & 1 << 0)
		button = 0;

	else if (*IntStsB & 1 << 1)
		button = 1;

	else if (*IntStsB & 1 << 2)
		button = 2;

	else if (*IntStsB & 1 << 3)
		button = 3;

	else if (*IntStsB & 1 << 4)
		button = 4;

	rt_task_make_periodic (&musicalKeyboard, rt_get_time(), music_period[button]);

	*GPIOBIntEOI|=0x1F;// 0001 1111 let the buttons's interrupts be cleared off

	rt_enable_irq (irq_num);
}

static void software_process(unsigned irq_num, void *cookie)
{
	rt_disable_irq (irq_num);
	//printk ("Software Handler is called.\n");

	int number_send;

	rtf_get (0, &number_send, sizeof (number_send));

	rt_task_make_periodic (&musicalKeyboard, rt_get_time(), music_period[number_send]);


	*VIC2SoftIntClear |= 1 << 31;		//clear software interrupt

	rt_enable_irq (irq_num);
}

static void rt_process(int t){

	while (1)

	{

		*PFDR=*PFDR|0x02; // 0000 0010 write the  bit 1  to  1 turn on the speaker
		rt_task_wait_period();

		*PFDR=*PFDR&0xFFFFFFFD; // 1111 1101 write the  bit 1  to  0 turn off the speaker
		rt_task_wait_period();

	}
}


int init_module(void){

	//map address
	int i;

	//set the registers

	unsigned long *GPOI_ptr=(unsigned long *)__ioremap(0x80840000,4096,0);
	unsigned long *VIC2_ptr=(unsigned long *)__ioremap(0x800C0000,4096,0);

	PBDDR=GPOI_ptr+5;//dir register

	*PBDDR=*PBDDR&0xFFFFFFE0;//1111 1111 1110 0000

	PFDDR=GPOI_ptr+13;//dir register

	*PFDDR=*PFDDR|0x01;//0000 0000 0000 0010

	PFDR=GPOI_ptr+12;//dir register

	GPIOBIntEn=GPOI_ptr+46;//interrupt register

	*GPIOBIntEn=*GPIOBIntEn|0x1F;//0000 0000 0001 1111--enable the buttons

	GPIOBIntType1=GPOI_ptr+43; //interrupt register

	*GPIOBIntType1=*GPIOBIntType1|0x1F;//0000 0000 0001 1111--edge

	GPIOBIntType2=GPOI_ptr+44;//interrupt register

	*GPIOBIntType2=*GPIOBIntType2|0x1F;//0000 0000 0001 1111--rising

	GPIOBIntEOI=GPOI_ptr+45;//interrupt register

	*GPIOBIntEOI=*GPIOBIntEOI|0x1F;//0000 0000 0001 1111--clean the buttons

	IntStsB=GPOI_ptr+47; //data register

	VIC2IntEnable=VIC2_ptr+4;//interrupt register

	VIC2SoftIntClear=VIC2_ptr+7;//interrupt register

	*VIC2IntEnable=*VIC2IntEnable|0x80000000;//1000 0000 0000 0000 0000 0000 0000 0000



	//initiate interrupt

	rt_request_irq (hard_irq_num, hardware_process, 0, 1);

	rt_request_irq(soft_irq_num, software_process, 0, 1);

	rt_enable_irq (hard_irq_num);

	rt_enable_irq (soft_irq_num);

	rt_set_periodic_mode();

	period = start_rt_timer(nano2count(500000));			//internal period is 0.5 ms

	for (i = 0; i < 5; i++)
		music_period[i] = period * (i + 1);

	rt_task_init(&musicalKeyboard, rt_process, 0, 256, 0, 0, 0);

	rt_task_make_periodic (&musicalKeyboard, rt_get_time(), music_period[0]);

	rtf_create(0, sizeof(int)); 	//fifo 0 is used to receive tone set by network

	//printk ("MusicalKeyBoardKernel MODULE INSTALLED\n");
	return 0;
}

void cleanup_module(void){

	rt_release_irq (hard_irq_num);

	rt_release_irq (soft_irq_num);

	rtf_destroy(0);

	rtf_destroy(1);

	rt_task_delete(&musicalKeyboard);

	stop_rt_timer();

	//printk ("MusicalKeyBoardKernel MODULE REMOVED\n");
}



